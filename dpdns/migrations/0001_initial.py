# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-10-12 20:23
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RunSQL("CREATE TABLE IF NOT EXISTS domains (id INT AUTO_INCREMENT, name VARCHAR(255) NOT NULL, master VARCHAR(128) DEFAULT NULL, last_check INT DEFAULT NULL, type VARCHAR(6) NOT NULL, notified_serial INT DEFAULT NULL, account VARCHAR(40) DEFAULT NULL, PRIMARY KEY (id) ) Engine=InnoDB"),
        migrations.RunSQL("CREATE UNIQUE INDEX name_index ON domains(name)"),
        migrations.RunSQL("CREATE TABLE IF NOT EXISTS records( id BIGINT AUTO_INCREMENT, domain_id INT DEFAULT NULL, name VARCHAR(255) DEFAULT NULL, type VARCHAR(10) DEFAULT NULL, content VARCHAR(64000) DEFAULT NULL, ttl INT DEFAULT NULL, prio INT DEFAULT NULL, change_date INT DEFAULT NULL, disabled TINYINT(1) DEFAULT 0, ordername VARCHAR(255) BINARY DEFAULT NULL, auth TINYINT(1) DEFAULT 1, PRIMARY KEY (id)) Engine=InnoDB"),
        migrations.RunSQL("CREATE INDEX nametype_index ON records(name,type)"),
        migrations.RunSQL("CREATE INDEX domain_id ON records(domain_id)"),
        migrations.RunSQL("CREATE INDEX recordorder ON records (domain_id, ordername)"),
        migrations.RunSQL("CREATE TABLE IF NOT EXISTS supermasters( ip VARCHAR(64) NOT NULL, nameserver VARCHAR(255) NOT NULL, account VARCHAR(40) NOT NULL, PRIMARY KEY (ip, nameserver)) Engine=InnoDB"),
        migrations.RunSQL("CREATE TABLE IF NOT EXISTS comments( id INT AUTO_INCREMENT, domain_id INT NOT NULL, name VARCHAR(255) NOT NULL, type VARCHAR(10) NOT NULL, modified_at INT NOT NULL, account VARCHAR(40) NOT NULL, comment VARCHAR(64000) NOT NULL, PRIMARY KEY (id)) Engine=InnoDB"),
        migrations.RunSQL("CREATE INDEX comments_domain_id_idx ON comments (domain_id)"),
        migrations.RunSQL("CREATE INDEX comments_name_type_idx ON comments (name, type)"),
        migrations.RunSQL("CREATE INDEX comments_order_idx ON comments (domain_id, modified_at)"),
        migrations.RunSQL("CREATE TABLE IF NOT EXISTS domainmetadata( id INT AUTO_INCREMENT, domain_id INT NOT NULL, kind VARCHAR(32), content TEXT, PRIMARY KEY (id)) Engine=InnoDB"),
        migrations.RunSQL("CREATE INDEX domainmetadata_idx ON domainmetadata (domain_id, kind)"),
        migrations.RunSQL("CREATE TABLE IF NOT EXISTS cryptokeys( id INT AUTO_INCREMENT, domain_id INT NOT NULL, flags INT NOT NULL, active BOOL, content TEXT, PRIMARY KEY(id)) Engine=InnoDB"),
        migrations.RunSQL("CREATE INDEX domainidindex ON cryptokeys(domain_id)"),
        migrations.RunSQL("CREATE TABLE IF NOT EXISTS tsigkeys( id INT AUTO_INCREMENT, name VARCHAR(255), algorithm VARCHAR(50), secret VARCHAR(255), PRIMARY KEY (id)) Engine=InnoDB"),
        migrations.RunSQL("CREATE UNIQUE INDEX namealgoindex ON tsigkeys(name, algorithm)"),

        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain_id', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=10)),
                ('modified_at', models.IntegerField()),
                ('account', models.CharField(max_length=40)),
                ('comment', models.CharField(max_length=64000)),
            ],
            options={
                'db_table': 'comments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Cryptokeys',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain_id', models.IntegerField()),
                ('flags', models.IntegerField()),
                ('active', models.IntegerField(blank=True, null=True)),
                ('content', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cryptokeys',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Domainmetadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain_id', models.IntegerField()),
                ('kind', models.CharField(blank=True, max_length=32, null=True)),
                ('content', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'domainmetadata',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Domains',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('master', models.CharField(blank=True, max_length=128, null=True)),
                ('last_check', models.IntegerField(blank=True, null=True)),
                ('type', models.CharField(max_length=6)),
                ('notified_serial', models.IntegerField(blank=True, null=True)),
                ('account', models.CharField(blank=True, max_length=40, null=True)),
            ],
            options={
                'db_table': 'domains',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Options',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=2000, null=True)),
            ],
            options={
                'db_table': 'options',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Records',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('type', models.CharField(blank=True, choices=[(b'A', b'A'), (b'AAAA', b'AAAA'), (b'CNAME', b'CNAME'), (b'SRV', b'SRV'), (b'SOA', b'SOA'), (b'NS', b'NS'), (b'MX', b'MX'), (b'PTR', b'PTR'), (b'TXT', b'TXT'), (b'SPF', b'SPF'), (b'CERT', b'CERT'), (b'DNSKEY', b'DNSKEY'), (b'DS', b'DS'), (b'KEY', b'KEY'), (b'NSEC', b'NSEC'), (b'RRSIG', b'RRSIG'), (b'HINFO', b'HINFO'), (b'LOC', b'LOC'), (b'NAPTR', b'NAPTR'), (b'RP', b'RP'), (b'AFSDB', b'AFSDB'), (b'SSHFP', b'SSHFP')], max_length=10, null=True)),
                ('content', models.CharField(blank=True, max_length=64000, null=True)),
                ('ttl', models.IntegerField(blank=True, null=True)),
                ('prio', models.IntegerField(blank=True, null=True)),
                ('change_date', models.IntegerField(blank=True, null=True)),
                ('disabled', models.IntegerField(blank=True, default=0, null=True)),
                ('ordername', models.CharField(blank=True, max_length=255, null=True)),
                ('auth', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'records',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Remote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record', models.IntegerField()),
                ('description', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=20)),
                ('security', models.CharField(max_length=2000)),
                ('nonce', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'remote',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Supermasters',
            fields=[
                ('ip', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('nameserver', models.CharField(max_length=255)),
                ('account', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'supermasters',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tsigkeys',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('algorithm', models.CharField(blank=True, max_length=50, null=True)),
                ('secret', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'tsigkeys',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('password', models.CharField(max_length=200)),
                ('type', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='APIKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(max_length=40, unique=True)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to='dpdns.Domains', unique=True)),
            ],
            options={
                'ordering': ['-created'],
                'verbose_name_plural': 'API Keys',
            },
        ),
        migrations.CreateModel(
            name='DomainAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.SmallIntegerField(choices=[(0, 'User'), (10, 'Owner')], default=0)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domain_accesses', to='dpdns.Domains')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(db_index=True, max_length=40, unique=True)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_tokens', to='dpdns.Domains')),
            ],
        ),
        migrations.CreateModel(
            name='Permissions',
            fields=[
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='dpdns.Users')),
            ],
            options={
                'db_table': 'permissions',
                'managed': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='domainaccess',
            unique_together=set([('domain', 'user')]),
        ),
    ]
